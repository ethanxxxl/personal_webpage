#+begin_src asm -n 1
;;; Title:          Analog signal decoder/transmitter and generator
;;;
;;; Objective:      CMPEN 472 Homework 11
;;;
;;; Revision:       V3.2  for CodeWarrior 5.2 Debugger Simulation
;;;
;;; Date:           30 November 2022
;;;
;;; Programmer:     Ethan Smith
;;;
;;; Company:        The Pennsylvania State University
;;;                 Department of Computer Science and Engineering
;;;
;;; Program:        Generates waves (saw, triangle, and square), outputting them over serial.
;;;                 a timer runs in the background
;;;
;;; Algorithm:      Command line interface. The user is presented with a command
;;;                 prompt on which they can type.
;;;
;;;                 when the user hits enter, their input is validated.
;;;                 if the input is valid, then it is parsed and evaluated.
;;;                 otherwise, the program returns an error.
;;;
;;;                 the clock is run using the RTI interrupt, which increments a counter.
;;;                 this counter is checked periodically, and when it is 400 (set lower for
;;;                 sim purposes), 1 second has elapsed, and the seconds/minutes counters are
;;;                 also updated.
;;;
;;;                 the waves are generated using the oc5 interrupt. Depending on the type of wave
;;;                 desired, there are 3 separate ISRs which will be set in the ISR jump vector when
;;;                 the appropriate command is run.
;;;
;;;                 the ADC command creates another interrupt routine on oc5 which
;;;                 reads from the ADC channel 7, and transmits the data to the
;;;                 terminal
;;;
;;; Register use:   Various usages depending on the subroutine.
;;;                 typically, X is used as input buffer pointer.
;;;                 D is typically used as the data pointer.
;;;
;;;                 each subroutine defines stack variables which are used throughout
;;;                 the subroutine.
;;;
;;; Memory use:     RAM Locations from $3000 for data,
;;;                 RAM Locations after data for program
;;;
;;;                 RAM Locations from program to 4100 for SP
;;;
;;;
;;; Observation:    Clock which counts up and loops around to 0:00 after 9:59
;;;                 can be set via tty s command.
;;;
;;;                 clock can be stopped with the quit command
;;;
;;;                 wave generator works as expected, with the caveat that the clock is slowed down
;;;                 while the wave is being generated, because the simulator slows down while printing.
;;;
;;;                 adc command works as expected. ADC channel 7 is sampled at
;;;                 8000Hz. it returns 2048 samples worth of data over the
;;;                 serial output.
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Parameter Declearation Section
;;;
;;; Export Symbols
            XDEF        pstart       ; export 'pstart' symbol
            ABSENTRY    pstart       ; for assembly entry point

;;; Symbols and Macros
PORTA       EQU         $0000        ; i/o port A addresses
DDRA        EQU         $0002
PORTB       EQU         $0001        ; i/o port B addresses
DDRB        EQU         $0003

SCIBDH      EQU         $00C8        ; Serial port (SCI) Baud Register H
SCIBDL      EQU         $00C9        ; Serial port (SCI) Baud Register L
SCICR2      EQU         $00CB        ; Serial port (SCI) Control Register 2
SCISR1      EQU         $00CC        ; Serial port (SCI) Status Register 1
SCIDRL      EQU         $00CF        ; Serial port (SCI) Data Register

TIOS        EQU         $0040        ; Timer Input Capture (IC) or Output Compare (OC) select
TIE         EQU         $004C        ; Timer interrupt enable register
TCNTH       EQU         $0044        ; Timer free runing main counter
TSCR1       EQU         $0046        ; Timer system control 1
TSCR2       EQU         $004D        ; Timer system control 2
TFLG1       EQU         $004E        ; Timer interrupt flag 1
TC5H        EQU         $005A        ; Timer channel 5 register

CRGFLG      EQU         $0037        ; Clock and Reset Generator Flags
CRGINT      EQU         $0038        ; Clock and Reset Generator Interrupts
RTICTL      EQU         $003B        ; Real Time Interrupt Control

ATDCTL2     EQU  $0082               ; Analog-to-Digital Converter (ADC) registers
ATDCTL3     EQU  $0083
ATDCTL4     EQU  $0084
ATDCTL5     EQU  $0085
ATDSTAT0    EQU  $0086
ATDDR0H     EQU  $0090
ATDDR0L     EQU  $0091
ATDDR7H     EQU  $009e
ATDDR7L     EQU  $009f

BS          equ         $08          ; backspace character
CR          equ         $0d          ; carriage return, ASCII 'Return' key
LF          equ         $0a          ; line feed, ASCII 'next line' character
NULL        equ         $00          ; null terminator

DATAmax     equ         2048         ; Data count maximum, 1024 constant
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Interrupt Vector Section
;;; org     $3FF0               ; RTI interrupt vector setup for CSM-128 board
            org     $FFF0               ; RTI interrupt vector setup for the simulator
            DC.W    rtiisr              ; place the address of the ISR at this location

            ORG     $FFE4       ; Timer channel 5 interrupt vector setup, on simulator
oc5isr      DC.W    $0000
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Data Section: address used [ $3000 to $30FF ] RAM memory
            ORG         $3000        ; Reserved RAM memory starting address
                                     ;   for Data for CMPEN 472 class

;;; convenience string for sending newlines to terminal
NEWLINE     DC.B         CR, LF, NULL

;;; the menu which is printed when the program first starts
MENU        DC.B   "Wave Generation Program", CR, LF
            DC.B   "use 'gw' to generate a sawtooth wave", CR, LF
            DC.B   "use 'gt' to generate a triangle wave", CR, LF
            DC.B   "use 'gq' to generate a square wave", CR, LF
            DC.B   "use 's M:SS' to set the current time", CR, LF
            DC.B   "use 'q' to quit the program and stop the clock", CR, LF, NULL

PROMPT      DC.B   "HW11> ", NULL
QUIT_MSG    DC.B   "Stopping Clock...", CR, LF
            DC.B   "Typewriter Program Started...", CR, LF, NULL

BUFF_ERR    DC.B   "Buffer Error", CR, LF, NULL
FMT_ERR     DC.B   "Format Error: proper format is 's M:SS'. M=[0,9] SS=[00,59]", CR, LF, NULL
FMT_ERR2    DC.B   "Format Error: you can only generate sawtooth (gw) triangle (gt) or square (gq) waves", CR, LF, NULL
CMD_ERR     DC.B   "Command Error: valid commands are", CR, LF
            DC.B   "                            's'  : set time", CR, LF
            DC.B   "                            'gw' : sawtooth wave generation", CR, LF
            DC.B   "                            'qt' : triangle wave generation", CR, LF
            DC.B   "                            'gq' : square wave generation", CR, LF
            DC.B   "                            'adc': get and print analog wave", CR, LF
            DC.B   "                            'q'  : quit", CR, LF, NULL

msg3        DC.B   "> Be sure to start saving Terminal data: open Output file = RxData3.txt", CR, LF, NULL
msg4        DC.B   "> press any key to continue...", CR, LF, CR, LF, NULL
msg5        DC.B   "> Done!  Close Output file.", CR, LF, NULL
msg6        DC.B   "> Ready for next data transmission.", CR, LF, NULL

ctr125u     DS.W   1            ; 16bit interrupt counter for 125 uSec. of time

BUF         DS.B   6            ; character buffer for a 16bit number in decimal ASCII
CTR         DS.B   1            ; character buffer fill count

;;; ADC variables
ATDdone     DS.B   1

;;; input and output string buffers
buffer    DS      30      ; 30 bytes for user input

;;; global variables for the current time
timem       DS.B    1           ; minute
times       DS.B    1           ; second

ctr2p5m     DS.W    1           ; interrupt counter for 2.5msec
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Program Section: address used [ end of DATA to $3FFF ] RAM memory

;;; char* buffer;
;;;
;;; while(true) {
;;;     update_leds();
;;;     print("Clock> ");
;;;     read_line(buffer);  // get user input
;;;     eval_input(buffer); // send user input to eval subroutine
;;; }
pstart
    lds     #$4100              ; initialize stack pointer

    ldaa    #%11111111          ; set all PORTA/B bits as output
    staa    DDRB                ; |
    staa    DDRA                ; |

    ldaa    #%00000000          ; clear PORTA/B
    staa    PORTB               ; |
    staa    PORTA               ; |

    ldaa    #$0C         ; Enable SCI port Tx and Rx units
    staa    SCICR2       ; disable SCI interrupts

    ldd     #$0001       ; Set SCI Baud Register = $0001 => 1.5M baud at 24MHz (for simulation)
;   ldd     #$0002       ; Set SCI Baud Register = $0002 => 750K baud at 24MHz
;   ldd     #$000D       ; Set SCI Baud Register = $000D => 115200 baud at 24MHz
;   ldd     #$009C       ; Set SCI Baud Register = $009C => 9600 baud at 24MHz
    std     SCIBDH       ; SCI port baud rate change

    ;; RTI ISR configuration
    bset   RTICTL,%00011001 ; set RTI: dev=10*(2**10)=2.555msec for C128 board
                            ;      4MHz quartz oscillator clock
    bset   CRGINT,%10000000 ; enable RTI interrupt
    bset   CRGFLG,%10000000 ; clear RTI IF (Interrupt Flag)

    ;;; ATD initialization
    ldaa    #%11000000       ; Turn ON ADC, clear flags, Disable ATD interrupt
    staa    ATDCTL2
    ldaa    #%00001000       ; Single conversion per sequence, no FIFO
    staa    ATDCTL3
    ldaa    #%10000111       ; 8bit, ADCLK=24MHz/16=1.5MHz, sampling time=2*(1/ADCLK)
    staa    ATDCTL4          ; for SIMULATION

    ldx    #0
    stx    ctr2p5m          ; initialize interrupt counter with 0.
    cli                     ; enable interrupt, global

    ;; print the menu
    ldx     #MENU
    jsr     print

    ldx     #PROMPT
    jsr     print

    ;; get user input and evaluate the command
    ldx     #buffer             ; load input_buffer

looop
    jsr     update_LEDs      ; make sure clock LEDs are updated
    ;; prompt the user for a command
    jsr     getchar             ; type writer - check the key board
    cmpa    #$00                ;  if nothing typed, keep checking
    beq     looop

    cmpa    #CR                 ; was an enter typed?
    beq     on_enter            ; |

    cmpa    #BS                 ; | was a backspace typed?
    beq     on_backspace        ; |

    cpx     #buffer+30          ; is there enough space in the input buffer?
    bls     append              ;  if yes, append input to input buffer

    ;; there is not enough space in the buffer, clear it (by reseting X)
    ;;  and report an error
clr_buf
    ldx     #NEWLINE            ; print a newline
    jsr     print               ; |

    ldx     #BUFF_ERR           ; print 'invalid command'
    jsr     print               ; |

    ldx     #NEWLINE            ; print a newline
    jsr     print               ; |

    ldx     #PROMPT
    jsr     print

    ldx     #buffer             ; reset input_buffer
    bra     looop               ; re-enter loop


append
    staa    1,X+                ; store the the typed character, and move the pointer
    clr     X                   ; null terminate

    jsr     putchar             ; display typed character in terminal
    bra     looop               ; get next character

on_enter
    ldx     #buffer             ; set input for evaluate_cmd

    ldaa    X                   ; if the user just pressed enter, without typing anything
    cmpa    #NULL               ; just print a new prompt (don't call evaluate)
    beq     blank_line          ; |

    ;; the user actually typed something
    jsr     eval                ; check the command

blank_line
    ldx     #NEWLINE            ; print a newline
    jsr     print               ; |

    ldx     #PROMPT
    jsr     print

    ldx     #buffer             ; reset input_buffer
    clr     X                   ; NULL terminate beginning of input buffer to clear it.

    bra     looop               ; get next command

on_backspace
    cpx     #buffer             ; ensure that there are characters to delete
    beq     looop               ; if there is nothing in the buffer, return to looop

    clr     1,-X                ; delete the last character, move pointer
    pshx                        ; store this value on stack so we can use X to print stuff

    ldaa    #LF                 ; move cursor to beginning of line
    jsr     putchar             ; |

    ldx     #PROMPT             ; print as new prompt
    jsr     print               ; |

    ldx     #buffer             ; print the input buffer
    jsr     print               ; |

    pulx                        ; restore current location of cursor in buffer

    bra     looop

;;; subroutine section below

;;; eval
;;;
;;; Program:    validates input and executes the command
;;;
;;; Input:      X Register: buffer
;;;
;;; Algorithm:
;;;     checks if command is s or q. if not, then exit to command error.
;;;
;;;     if command is s:
;;;         is the rest of the command in this format: M:SS? (where M is [0,9], S is [00,59])
;;;         if so, then set the minutes and seconds variables.
;;;         else, exit format error.
;;;
;;;     if command is q:
;;;         check and make the buffer only contains q
;;;             if not, exit command error
;;;             else, print quit message, enter typewriter program
eval
    pshx
    pshy
    psha

    ldaa    1,X+                ; A = command (every command is just one character)
    cmpa    #'s'                ; does command == 's'?
    beq     eval_set_time       ; if so, validate and execute it.

    cmpa    #'g'                ; does command == 'g'?
    beq     eval_gen_sig        ; if so, validate and execute it.

    cmpa    #'a'                ; does command == 'a'?
    lbeq     eval_adc            ; if so, see if it is 'adc'

    cmpa    #'q'                ; does command == 'q'?
    lbeq     eval_quit           ; if so, validate and execute it.

    ;; the command didn't match anything, so exit failure
    lbra     eval_exit_cmd_error

eval_set_time
    ldaa    1,X+                ; is the input in the format of "s M:SS"?
    cmpa    #' '                ;    if not, jump to exit_error
    lbne    eval_exit_error      ;    else, continue
                                ; |
    ldaa    1,X+                ; |
    jsr     is_dig              ; |
    lbne     eval_exit_error     ; |
                                ; |
    ldaa    1,X+                ; |
    cmpa    #':'                ; |
    lbne     eval_exit_error     ; |
                                ; |
    ldaa    1,X+                ; |
    jsr     is_dig              ; |
    lbne     eval_exit_error     ; |
                                ; |
    ldaa    1,X+                ; |
    jsr     is_dig              ; |
    lbne     eval_exit_error     ; |
                                ; |
    ldaa    1,X+                ; |
    cmpa    #NULL               ; |
    lbne     eval_exit_error     ; |

    ;; at this point, we know the buffer is properly formatted
    ldx     3,SP                ; reset buffer pointer
    leax    4,X                 ; load address of seconds number
    jsr     atoi                ; convert number at address from ascii to integer

    cpd     #59                 ; if seconds > 59 then:
    lbhi     eval_exit_error     ; invalid time input, exit error

    stab    times               ; store lower 8 bits of output to seconds variable

    ;; store the minutes now that we know the seconds are valid
    ldx     3,SP                ; reset buffer pointer
    leax    2,X                 ; load address of first digit
    ldaa    X                   ; A = first digit
    suba    #$30                ; Convert A from ascii to integer

    staa    timem               ; store to minutes variable

    lbra     eval_exit           ; exit subroutine

eval_gen_sig
    ldaa    1,X+
    cmpa    #'w'
    beq     eval_sig_valid
    cmpa    #'t'
    beq     eval_sig_valid
    cmpa    #'q'
    beq     eval_sig_valid
    lbra    eval_exit_error2

eval_sig_valid
    ldaa    1,X-                ; move pointer back to the wave specifier
    cmpa    #NULL
    lbne    eval_exit_error2    ; exit error
    tfr     X,Y                 ; Move X to Y, so X can be used for print

    ldx     #NEWLINE
    jsr     print
    ldx     #msg3
    jsr     print
    ldx     #msg4
    jsr     print

eval_sig_get_key
    jsr     update_LEDs
    jsr     getchar
    cmpa    #NULL
    beq     eval_sig_get_key

    ldx     #0                  ; reset counter
    stx     ctr125u

    ldaa    Y
    jsr     StartTimer5oc

loop2048
    jsr     update_LEDs      ; make sure clock LEDs are updated
    ldd     ctr125u
    cpd     #DATAmax         ; 1024 bytes will be sent, the receiver at Windows PC
    bhs     loopTxON         ;   will only take 2048 bytes.
    bra     loop2048         ; set Terminal Cache Size to 10000 lines, update from 1000 lines

loopTxON
    LDAA    #%00000000
    STAA    TIE               ; disable OC5 interrupt

    ldx     #NEWLINE
    jsr     print
    jsr     print

    ldx     #msg5            ; print '> Done!  Close Output file.'
    jsr     print

    ldx     #msg6            ; print '> Ready for next data transmission'
    jsr     print

    ldx     #NEWLINE
    jsr     print

    bra     eval_exit

eval_adc
    ldaa    1,X+
    cmpa    #'d'
    bne     eval_exit_cmd_error

    ldaa    1,X+
    cmpa    #'c'
    bne     eval_exit_cmd_error

    ldaa    1,X+
    cmpa    #NULL
    bne     eval_exit_cmd_error

    ldx     #NEWLINE
    jsr     print
    jsr     print

eval_adc_get_key
    jsr     update_LEDs
    jsr     getchar
    cmpa    #NULL
    beq     eval_adc_get_key

    ldx     #0                  ; reset counter
    stx     ctr125u

    ldx     #NEWLINE
    jsr     print

    ldaa    #'a'
    jsr     StartTimer5oc
    bra     loop2048

eval_quit
    ldaa    X
    cmpa    #NULL
    bne     eval_exit_cmd_error

    sei                         ; disable interrupts, thus stopping the clock

    ldx     #NEWLINE            ; print quit message
    jsr     print               ; |
    ldx     #QUIT_MSG           ; |
    jsr     print               ; |

    jsr     typewriter          ; enter typewriter program

eval_exit_error
    ldx     #NEWLINE            ; print a newline, then the error message
    jsr     print               ; |
    ldx     #FMT_ERR            ; |
    jsr     print               ; |
    bra     eval_exit           ; |

eval_exit_error2
    ldx     #NEWLINE            ; print a newline, then the error message
    jsr     print               ; |
    ldx     #FMT_ERR2           ; |
    jsr     print               ; |
    bra     eval_exit           ; |

eval_exit_cmd_error
    ldx     #NEWLINE            ; print a newline, then the error message
    jsr     print               ; |
    ldx     #CMD_ERR            ; |
    jsr     print               ; |

eval_exit
    pula
    puly
    pulx

    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;***********Timer OC5 interrupt service routine***************
oc5isr_saw
    ldd     #3000              ; 125usec with (24MHz/1 clock)
    addd    TC5H               ;    for next interrupt
    std     TC5H               ;
    bset    TFLG1,%00100000    ; clear timer CH6 interrupt flag, not needed if fast clear enabled
    ldd     ctr125u
    ldx     ctr125u
    inx                        ; update OC5 (125usec) interrupt counter
    stx     ctr125u
    clra                       ;   print ctr125u, only the last byte
    jsr     pnum10             ;   to make the file RxData3.txt with exactly 1024 data
    RTI
;***********end of Timer OC5 interrupt service routine********

;Timer OC5 interrupt service routine***************
oc5isr_tri
    ldd     #3000              ; 125usec with (24MHz/1 clock)
    addd    TC5H               ;    for next interrupt
    std     TC5H               ;
    bset    TFLG1,%00100000    ; clear timer CH6 interrupt flag, not needed if fast clear enabled
    ldd     ctr125u
    ldx     ctr125u
    inx                        ; update OC5 (125usec) interrupt counter
    stx     ctr125u


    anda    #%00000001          ; if lsb is 1, countdown
    bne     tri_countdown       ; else, countup
    bra     tri_countup

tri_countdown
    ldaa    #$FF                ; do 255 - B
    sba                         ; result is stored in A,
    tab                         ; so move it to B
    bra     tri_exit

tri_countup

tri_exit
    clra
    jsr   pnum10             ;   to make the file RxData3.txt with exactly 1024 data
    rti
;***********end of Timer OC5 interrupt service routine********

;Timer OC5 interrupt service routine***************
oc5isr_square
    ldd     #3000              ; 125usec with (24MHz/1 clock)
    addd    TC5H               ;    for next interrupt
    std     TC5H               ;
    bset    TFLG1,%00100000    ; clear timer CH6 interrupt flag, not needed if fast clear enabled
    ldd     ctr125u
    ldx     ctr125u
    inx                        ; update OC5 (125usec) interrupt counter
    stx     ctr125u

    anda    #%00000001          ; if lsb is 1, hi
    bne     square_hi           ; else, low
    bra     square_lo

square_hi
    ldab    #$FF
    bra     square_exit
square_lo
    ldab    #0

square_exit
    clra                     ;   print ctr125u, only the last byte
    jsr     pnum10             ;   to make the file RxData3.txt with exactly 1024 data
    RTI
;***********end of Timer OC5 interrupt service routine********

;Timer OC5 interrupt service routine***************
oc5isr_adc
    ldd     #3000              ; 125usec with (24MHz/1 clock)
    addd    TC5H               ;    for next interrupt
    std     TC5H               ;
    bset    TFLG1,%00100000    ; clear timer CH6 interrupt flag, not needed if fast clear enabled
    ldx     ctr125u
    inx                        ; update OC5 (125usec) interrupt counter
    stx     ctr125u

;adcwait
;    ldaa    ATDSTAT0            ; if necessary, wait until conversion is done.
;    anda    #%10000000
;    beq     adcwait

    ldab    ATDDR0L            ; get number from adc
    clra
    jsr     pnum10             ; print number from adc

    ;; start another conversion
    ldaa    #%10000111       ; right justified, unsigned, single conversion,
    staa    ATDCTL5          ; single channel, CHANNEL 7, start the conversion
    RTI
;***********end of Timer OC5 interrupt service routine********

;***************StartTimer5oc************************
;* Program: Start the timer interrupt, timer channel 6 output compare
;* Input:   A Register: ascii code for type of signal
;           Constants - channel 6 output compare, 125usec at 24MHz
;* Output:  None, only the timer interrupt
;* Registers modified: D used and CCR modified
;* Algorithm:
;             initialize TIOS, TIE, TSCR1, TSCR2, TC2H, and TFLG1
;**********************************************
StartTimer5oc
    pshd
    pshx

    ;; set appropriate interrupt vector
    cmpa    #'w'
    beq     saw5oc
    cmpa    #'t'
    beq     triangle5oc
    cmpa    #'q'
    beq     square5oc
    cmpa    #'a'
    beq     adc5oc

saw5oc
    ldx     #oc5isr_saw
    bra     store5oc
triangle5oc
    ldx     #oc5isr_tri
    bra     store5oc
square5oc
    ldx     #oc5isr_square
    bra     store5oc
adc5oc
    ldx     #oc5isr_adc


store5oc
    stx     oc5isr

    ldaa    #%00100000
    staa    TIOS              ; set CH5 Output Compare
    staa    TIE               ; set CH5 interrupt Enable
    ldaa    #%10000000        ; enable timer, Fast Flag Clear not set
    staa    TSCR1
    ldaa    #%00000000        ; TOI Off, TCRE Off, TCLK = BCLK/1
    staa    TSCR2             ;   not needed if started from reset

    ldd     #3000            ; 125usec with (24MHz/1 clock)
    addd    TCNTH            ;    for first interrupt
    std     TC5H             ;

    bset    TFLG1,%00100000   ; initial Timer CH5 interrupt flag Clear, not needed if fast clear set
    ldaa    #%00100000
    staa    TIE               ; set CH5 interrupt Enable

    pulx
    puld
    rts
;***************end of StartTimer2oc*****************


;***********pnum10***************************
;* Program: print a word (16bit) in decimal to SCI port
;* Input:   Register D contains a 16 bit number to print in decimal number
;* Output:  decimal number printed on the terminal connected to SCI port
;*
;* Registers modified: CCR
;* Algorithm:
;     Keep divide number by 10 and keep the remainders
;     Then send it out to SCI port
;  Need memory location for counter CTR and buffer BUF(6 byte max)
;**********************************************
pnum10          pshd                   ;Save registers
                pshx
                pshy
                clr     CTR            ; clear character count of an 8 bit number

                ldy     #BUF
pnum10p1        ldx     #10
                idiv
                beq     pnum10p2
                stab    1,y+
                inc     CTR
                tfr     x,d
                bra     pnum10p1

pnum10p2        stab    1,y+
                inc     CTR
;--------------------------------------

pnum10p3        ldaa    #$30
                adda    1,-y
                jsr     putchar
                dec     CTR
                bne     pnum10p3
                ldx     #NEWLINE
                jsr     print
                puly
                pulx
                puld
                rts
;***********end of pnum10********************

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; typewriter
;;; Program:    simple echo program which sends user input back to the terminal
;;;
;;; Input:      None
;;; Output:     None, doesn't ever return to main loop
;;; Algorithm:
;;;     gets character from terminal
;;;     sends character back to terminal.
;;;     if newline is recieved, a linefeed is also sent to terminal
typewriter
    jsr     getchar
    jsr     putchar

    cmpa    #CR
    bne     typewriter

typewriter_onenter
    ldaa    #LF
    jsr     putchar
    bra     typewriter

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; update_LEDs
;;; Program:    convert integer to binary coded decimal, and update PORTA/PORTB with minutes and seconds.
;;;
;;; Input:      None. uses global minutes and seconds counters
;;; Ouput:      Modifies PORTA and PORTB
;;; Algorithm:
;;;     values are stored as integers. minutes is easy, just store it at PORTA
;;;
;;;     for PORTB, first it is divided by 10. the remainder is the 1's place,
;;;     quotient is the 10's place.
;;;
;;;     the 1's digit is stored in the temp variable. then the 10's digit is shifted.
;;;     they are or'ed together
;;;     the result is stored in PORTB
;;;
;;;     NOTE: A temp variable isn't needed, but if PORTB is used directly, then the simulator
;;;     will flicker the seconds 10's place digit (this wouldn't be visible in real life).
;;;     a temp variable is used soley for the simulator.
update_LEDs
    pshd
    pshx
    clr     1,-SP               ; temp variable

    ;; does the time need updated?
    ldd     ctr2p5m             ; check the 2.5ms counter, has 1000ms elapsed?
    cpd     #150                ; | (ie, counter == 400)
    bls     update_LEDs_skip    ; | (for sim purposes, this value is set to 150)

    ;; the counter
    clr     ctr2p5m             ; clear (BOTH BYTES) of the counter
    clr     ctr2p5m+1           ; |
    inc     times               ; increment the seconds counter

    ldaa    times               ; is the seconds counter == 60?
    cmpa    #60                 ; |
    blo     update_LEDs_skip    ; |

    ;; seconds counter == 60
    clr     times               ; reset the seconds counter
    inc     timem               ; increment the minutes counter

    ldaa    timem               ; is the minutes counter == 10?
    cmpa    #10                 ; |
    blo     update_LEDs_skip    ; |

    ;; minutes counter == 10
    clr     timem               ; reset minutes counter back to 0

update_LEDs_skip

    ;; do first divide (for 1's digit)
    ldab    times               ; set dividend (total num of seconds)
    clra                        ; ensure A is zero for divide
    ldx     #10                 ; set divisor
    idiv

    stab    SP                  ; stash 1's digit on temp variable

    ;; 10's digit is now in X register
    tfr     X,D                 ; move from X to D (low-4 will be in B register)

    lslb                        ; move digit to upper four bits
    lslb                        ; |
    lslb                        ; |
    lslb                        ; |

    orab    SP                  ; combine 10's and 1's in PORTB
    stab    PORTB               ; store value to PORTB

    ;; send result out to ports
    ldaa    timem
    staa    PORTA

    leas    1,SP                ; pop off temp variable
    pulx
    puld
    rts

;;; atoi
;;;
;;; Program:    converts a string to an integer (if possible)
;;;
;;; Input:      X Register: pointer to string
;;;
;;; Output:     D Register: integer representation of string
;;;             modifies err_flag and err_data
;;;
;;; Algorithm:
;;;     converts digits up to first non-number character.
;;;      e.g. atoi("12hey there") -> 12
;;;
;;;     if the first character is a non-number, D is set to zero
;;;      and err_flag and err_data are set accordingly
;;;      e.g. atoi("afs12") -> 0 (ERROR)
;;;
;;;     Stack Layout:
;;;         SP + 8: return address
;;;         SP + 6: X reg
;;;         SP + 5: len var
;;;         SP + 4: pow var
;;;         SP + 2: tmp var
;;;         SP + 0: accum var
;;;
;;;     // find length of number
;;;     len = 0 ; length accumulator
;;;     while is_digit((X++)*):
;;;         len++;
;;;
;;;     // add up each digit
;;;     index = len; // len is now index for X
;;;     accum = A; store A on the stack
;;;     pow = 0; // power variable
;;;     B = 1 ; // B is now the Power Accumulator
;;;     X = index+X ; we are going through this number backwards
;;;     while index > 0:
;;;         index--;
;;;         pow = index;
;;;         D = X[-index];
;;;
;;;         if pow == 0:
;;;             accum += D
;;;
;;;         tmp = D
;;;         while pow > 0:
;;;             tmp += tmp << 3
;;;             tmp += tmp << 1
;;;             pow--;
;;;
;;;         accum += tmp
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
atoi
    pshy
    pshx
    clr     1,-SP               ; len var / index var
    clr     1,-SP               ; pow var
    clr     1,-SP               ; tmp var
    clr     1,-SP               ; |
    clr     1,-SP               ; accum var
    clr     1,-SP               ; |

atoi_getlen
    ldaa    1,X+                ; get next character
    jsr     is_dig              ; break if character != number
    bne     atoi_getlen_exit    ; |

    inc     5,SP                ; increment length
    bra     atoi_getlen         ; continue

atoi_getlen_exit
    ldx     6,SP                ; reload x from stack
    dex                         ; keep X from being incremented prematurely.
atoi_accumulate
    ldaa    5,SP                ; if index == 0, break
    cmpa    #0                  ; |
    beq     atoi_exit           ; |
    dec     5,SP                ; decrement index
    deca                        ; decrement register to track
    inx                         ; decrement pointer

    movb    5,SP, 4,SP          ; pow = index

    cmpa    #0                  ; if pow > 0, skip special handling
    bne     atoi_calc_power     ;

    clra                        ; clear A register
    ldab     X                  ; load lower 8 bits to B
    subb    #$30                 ; convert from ascii
    addd    SP                  ; D += accum
    std     SP                  ; accum = D
    bra     atoi_exit           ; at this point, loop is finished

    ;; because of the previous if statement, we know that index and power
    ;; will always be at least 1
atoi_calc_power
    clra
    ldab    X                   ; load lower 8 bits to B
    subb    #$30                ; convert from ascii

    std     2,SP                ; store in tmp
atoi_calc_power_lp
    ldaa    4,SP                ; if pow = 0, break
    cmpa    #0                  ; |
    beq     atoi_calc_power_exit; |
    dec     4,SP                ; decrement pow var

    ;; prepare for first shift
    ldd     2,SP                ; D = tmp
    tfr     D,Y                 ; stash D in Y

    lsld                        ; D *= 8
    lsld                        ; |
    lsld                        ; |

    std     2,SP                ; tmp = D

    ;; prepare for shift again
    tfr     Y,D                 ; retrieve D from Y

    lsld                        ; D *= 2

    addd    2,SP                ; tmp += D
    std     2,SP                  ; |

    bra     atoi_calc_power_lp

atoi_calc_power_exit
    ldd     2,SP                ; load tmp into D
    addd    SP                  ; add tmp to accum
    std     SP                  ; |
    bra     atoi_accumulate

atoi_exit
    ldd     SP                  ; D = accumulator
    leas    6,SP
    pulx
    puly
    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; is_dig
;;;
;;; Program:    determines if the value in A is an ascii digit
;;;
;;; Input:      A register: Ascii test value
;;;
;;; Output:     Modifies Zero bit in CCR
;;;
;;; Algorithm:
;;;     if A < '0' or A > '9':
;;;         return false
;;;     else:
;;;         return true
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
is_dig
    cmpa    #'0'                ; if A < '0' or A > '9' return false
    blo     is_dig_false        ; |
    cmpa    #'9'                ; |
    bhi     is_dig_false        ; |

is_dig_true
    orcc    #%00000100          ; set Z bit in CCR
    rts

is_dig_false
    andcc   #%11111011          ; clear Z bit in CCR
    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; print
;;;
;;; Program: Output character string to SCI port, print message
;;; Input:   Register X points to ASCII characters in memory
;;; Output:  message printed on the terminal connected to SCI port
;;;
;;; Registers modified: CCR
;;; Algorithm:
;;;     Pick up 1 byte from memory where X register is pointing
;;;     Send it out to SCI port
;;;     Update X register to point to the next byte
;;;     Repeat until the byte data $00 is encountered
;;;       (String is terminated with NULL=$00)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
print
    psha                   ;Save registers
    pshx
printmsgloop
    ldaa    1,X+           ;pick up an ASCII character from string
                            ;   pointed by X register
                            ;then update the X register to point to
                            ;   the next byte
    cmpa    #NULL
    beq     printmsgdone   ;end of strint yet?
    jsr     putchar        ;if not, print character and do next
    bra     printmsgloop

printmsgdone
    pulx
    pula
    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; putchar
;;;
;;; Program: Send one character to SCI port, terminal
;;; Input:   Accumulator A contains an ASCII character, 8bit
;;; Output:  Send one character to SCI port, terminal
;;; Registers modified: CCR
;;; Algorithm:
;;;    Wait for transmit buffer become empty
;;;      Transmit buffer empty is indicated by TDRE bit
;;;      TDRE = 1 : empty - Transmit Data Register Empty, ready to transmit
;;;      TDRE = 0 : not empty, transmission in progress
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
putchar
    brclr SCISR1,#%10000000,putchar   ; wait for transmit buffer empty
    staa  SCIDRL                      ; send a character
    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; getchar
;;;
;;; Program: Input one character from SCI port (terminal/keyboard)
;;;             if a character is received, other wise return NULL
;;; Input:   none
;;; Output:  Accumulator A containing the received ASCII character
;;;          if a character is received.
;;;          Otherwise Accumulator A will contain a NULL character, $00.
;;; Registers modified: CCR
;;; Algorithm:
;;;    Check for receive buffer become full
;;;      Receive buffer full is indicated by RDRF bit
;;;      RDRF = 1 : full - Receive Data Register Full, 1 byte received
;;;      RDRF = 0 : not full, 0 byte received
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
getchar
    brclr SCISR1,#%00100000,getchar7
    ldaa  SCIDRL
    rts
getchar7
    clra
    rts
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
rtiisr
    bset    CRGFLG,%10000000 ; clear RTI Interrupt Flag - for the next one
    ldx     ctr2p5m          ; every time the RTI occur, increase
    inx                      ;    the 16bit interrupt count
    stx     ctr2p5m
    rti

;OPTIONAL
;more variable/data section below
; this is after the program code section
; of the RAM.  RAM ends at $3FFF
; in MC9S12C128 chip

               END               ; this is end of assembly source file
                                 ; lines below are ignored - not assembled/compiled
#+end_src
