#+title: Portfolio
#+include: "includes.org"
# surround the main content with a div so that you can format it properly.
#+html: <div class="portfolio-content">
#+html: <script src="../resources/full-screen.js"></script>

* Introduction
Here I have compiled a subset of the things I have worked on throughout my life.
It is certainly not comprehensive and many projects are unfinished. I have
included things I have worked on both in school and on my own time.

* This Website
I write this site using Emacs ~org-mode~, making good use of its fantastic
export capabilities. My workflow is a little different from how emacs is
configured by default, however. ~org-publish~ is sort of set up for someone who
uses a single computer. My workflow involves a plethora of devices. I actively
edit this site on my Macbook, and my desktop running Arch. I can foresee myself
also editing it on my desktop under Windows, or on other laptops running
whatever operating system I decide to run at that time.

Because of this workflow, I wanted to be able to contain all the information
related to this website, including export information, inside of a single
directory tree. This immediately presents challenges, because ~org-publish~
makes use of several global variables which add state to its export functions.
The main variable of concern, however, is ~org-publish-project-alist~. This
variable is intended to contain *all* projects that you ever work on. In theory,
there are benefits to this, but in practice, it just means my config files for
the website are spread all over my computer.

To solve this, I wrote some elisp which is bound to ~SPC m P l~. Simply put, it
looks for a file named ~export-config.el~ in the root directory of your project.
This file defines a varaible called ~org-publish-project-local-alist~, which
does the same thing as ~org-publish-project-alist~, but /it's local/ (real
complex stuff, I know).

There is one problem though. In the local alist, I can't use absolute paths,
because that would sort of defeat the purpose of being able to clone the git
repo anywhere and work on it. I don't really need absolute paths, because all
the files I reference in ~export-config.el~ are relative to the website root
directory. But when the publishing function runs, it gets really confused with
the relative paths (especially when using ~#+include: ...~ in my files.)

At this point, I pull an India Jones with these two variables and swap them
before calling the ~org-publish-all~ function. This publishes the entire website
with a local configuration.

I moved the elisp I wrote for this modification into a separate file which is
loaded during startup for emacs. This file is shown below.

#+include: "./portfolio/org-publish-local.el.org"

* Courses at Penn State
There were a few classes in that I learned anything of substance during college.

** Computer Engineering 472
The [[https://www.cse.psu.edu/~kxc104/class/cmpen472/23s/index.html][coures webpage]] has a lot of information about the course. Professor Choi
updates the course from year to year, so the curriculum posted there probably
isn't exactly what I did.

We spent the semester programming the HC12 Microcontroller in Assembly. We
learned about many different programming techniques specific to embedded
systems:
- Peripherals
- Memory access/management
- Interrupts
- Using the stack

We were assigned homework every week, which consisted of writing various
routines. It was incredibly important to complete these routines because they
would be used in subsequent assignments. Many hard lessons about assembly were
learned in this class.

Some notable applications we made included a prefix notation calculator and a
command line memory editor. I remember my excitement when I punched in the
address for the command prompt and changed the symbol from a '>' to '$'!

I have included the code from the first and last homework we completed in this
class to show the progression of program complexity.

*** Homework 1
#+include: "portfolio/472hw1.asm.org"
*** Homework 11
#+include: "portfolio/472hw11.asm.org"

** Computer Engineering 473
This course was also taught by Professor Choi, the course webpage can be found
[[https://www.cse.psu.edu/~kxc104/class/cmpen473/22s/][here]]. We spent the semester designing and building an autonomous robotic car
from scratch, using a Raspberry Pi 4. We started by learning how to access the
GPIO registers on the Pi in memory, using the ~mmap~ C function. From that point
on, continued to iterate on the design, constantly adding new features.

This course heavily incorporated multithreaded programming and interthread
communication. Most of my peers used the professor's FIFO implementation, but I
had already made a ringbuffer implementation by the time he distributed his
solution.

#+include: "portfolio/ringbuf.h.org"
#+html: <object data="portfolio/ringbuf.h"></object>

*** Manual Driving Mode


*** Line Follow Mode (IR sensor)

*** IMU Sensor Balence Board

*** Line Follow Mode (Computer Vision)

* Programming
The projects I have listed below, along with others, can be found on my [[https://github.com/ethanxxxl][github]].

** Capabilities Overview
I currently know the following languages well enough that I would be comfortable
working with them in a professional environment immediately:

- C
- C++
- Rust
- Assembly*
- Python
- Lisp**

*My experience is limited embedded systems (microcontrollers)\\
**I mostly use Emacs Lisp

I am confident I could pick up just about any language relatively quickly, I am
currently in the process of learning haskell, which seems to be the hardest
language I have touched so far. I have used many more languages in the past, but
the ones I have listed I am most confident with.

** Code Wars
Every once in a while, I like to spend some time working through programming
challenges on the codewars website. I think that it is a great way to hone
programming skills, and pick up new languages.

#+html: <img src="https://www.codewars.com/users/ethanxxxl/badges/large" alt="Codewars badge">

** Hack Chat
I developed this application during the Summer of 2022, while I was at AFIT
learning about cyber warfare, network defense, and other topics. The idea is
simple: multiple clients can enter a chat room on the server. I had great ideas
for this project that never came to fruition, but I did leave implement the
fundumental features. I even had the courtesy to leave it in a working state!

Since hackchat is written in rust, you can try this for yourself by running the
following code (assuming your machine has cargo installed):

#+begin_src bash
$ git clone https://github.com/ethanxxxl/hackchat.git
$ cd hackchat
$ cargo run --bin server
#+end_src

You can run clients in a few more terminals. It will prompt you for an ip
address, which is printed by the server.

#+begin_src bash
$ cd hackchat
$ cargo run --bin client
#+end_src

An example of the program running and working is shown in the image below.

# this is a bit of a hack, this path won't work unless the org files are
# included in the website.
#+attr_html: :width 700px :margin auto
[[../resources/portfolio/hackchat-demo.png]]

Note, that I am running this on Arch Linux. It may work on MacOS, but I'm pretty
sure it won't work on Windows.

** Rust-Snake
This was the first real program I wrote using Rust; A rudimentary implementation
of the classic game Snake. I Learned a lot about the language from this project.
Unfortunately, time has not been kind to this project. It is hosted on [[https://github.com/ethanxxxl/rust-snake][github]],
so you can peruse my code if you wish, but unfortunately, when I wrote this
program, I didn't have the forethought to create a binary, or even take pictures
of the final product.

I did spend about 30 minutes trying to get it to work, but I was not willing to
spend any more time on it.

# surround the main content with a div so that you can format it properly.
#+html: </div>
